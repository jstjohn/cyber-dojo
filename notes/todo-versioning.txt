
Thinking in the shower this morning...

Some of the images on the cyberdojo docker index now have auto-builds.
This needs to be reverted back. The image name includes the version number.
So as it stands it means I cannot create a new version of g++
Viz I cannot replace 4.8.1 with 4.9 and have both appear with a display_name
of just C++. 
Eg consider the current docker index image g++-4.8.1_assert
If this is an auto-build then it will see an update to the
languages/C++-assert/Dockerfile but its name is hard-wired to g++-4.8.1_assert
If I update the Dockerfile for C++-assert so it now reflects 4.9 
then the docker index will see the change and auto-build a new
container called g++-4.8.1_assert which will actually be for C++ 4.9
So I need to revert back to non-auto builds.
Aside: Auto-builds are also inflating my git clone statistics on github.

Also, I need to put a URL to the Dockerfile that is for a specific
commit on github. Again, this is so that if and when I update
the Dockerfile the version on the given commit is still valid if
anyone wants to build that image.

How to do this?
Delete the repo from the cyberdojo index.
The go to a server that has a copy of the image.
Then $ docker push cyberdojo/image_name
Then edit its Dockerfile tab to contain a URL.


Once I have done these two steps I can start to do actual
version updates.
And also fix the Java dir names which still have version
numbers in them.

It also raises the question of whether to actually have the version
number as part of the display name (and dir name) when I have multiple
versions appear on the create page.
I think not.
cyber-dojo is fundamentally for short lived sessions.
If you fork from a kata and its language has been upgraded then
you may have to modify your code to cater for the upgrade.
This is just like a real upgrade!

Also, it does raise the question of whether to keep old docker images
around. If I did not keep old images around then I would need to be
careful that new images were in the cyberdojo docker index before
their names appear in the git repo master branch. 


-----------------------------------------------------------
A cyberdojo's manifest.json file contains the name of the language. Eg
  cyber-dojo/katas/A9/606FDA05/manifest.json
    { ....  "language":"Java-1.8_JUnit" .... }
  cyber-dojo/katas/3F/611E5054/manifest.json
    { ....  "language":"C++-GoogleTest" .... }

Note this is the name and not the display_name.
This often contains the version number (eg 1.8)
This is a mistake. It makes it harder than necessary
to update a container (eg Ruby 1.9.3 to 2.1.3)

I think it is much better to create a base language container
image which includes its version in its name.
Eg

languages/Ruby-1.9.3
  build-docker-container.sh  --> cyberdojo/ruby-1.9.3
  Dockerfile
languages/Ruby-2.1.3
  build-docker-container.sh  --> cyberdojo/ruby-2.1.3
  Dockerfile

And then to create language+unit-test
based on a language with a specific version and whose
languages/folder-name does *not* contain a version number
but whose manifest.json file names a docker image which
*does* contain a version number.

Eg
languages/Ruby-MiniTest
  build-docker-container.sh  --> cyberdojo/ruby-2.1.3_mini_test
  Dockerfile (FROM cyberdojo/ruby-2.1.3)
  manifest.json { image_name: "cyberdojo/ruby-2.1.3_mini_test" }

This enables me to move a language+unit-test framework
to a new version number by leaving the languages/folder-name
the same but updating the version number of the docker
container created, as it appears in the manifest.json


Moving forward I am going to have to create
a 'rename' adapter for the language which bypasses
this for existing dojos.
An extension to app/models/lanuages.rb latest(name)
Viz
      'Java'               => 'Java-1.8_JUnit',
Becomes
      'Java'               => 'Java-JUnit',
      'Java-1.8_JUnit'     => 'Java-JUnit'

-------------------------------------------------------

I can always keep images for different versions in the cyberdjo docker index.
The question is whether to 

1) keep version numbers out of the display-name
   language/test combination always takes you to latest docker image

2) put version numbers on the display name
   language/test combination takes you to what it says









